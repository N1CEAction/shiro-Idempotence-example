<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JUnitGeneratorProjectSettings">
    <option name="listOverloadedMethodsBy" value="number" />
    <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
        <entry key="JUnit 4" value="######################################################################################## &#10;##  自制junit模板1 适用于util工具类&#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;)&#10;## 定义目标类&#10;#set( $target= &quot;target&quot;)&#10;&#10;## &#10;## 包名：注意test&#10;package $entry.packageName; &#10;&#10;import com.cn21.edrive.product.iapi.base.BaseJunitTest;&#10;import com.cn21.edrive.product.iapi.util.JsonUtil;&#10;import org.apache.log4j.Logger;&#10;import org.junit.Test;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.mock.web.MockHttpServletRequest;&#10;import org.springframework.mock.web.MockHttpServletResponse;&#10;&#10;import static org.hamcrest.Matchers.is;&#10;import static org.junit.Assert.assertThat;&#10;&#10;/** &#10;* ${entry.className} $target. &#10;* &#10;* @author N1CE&#10;* @since $today &#10;* @version 1.0 &#10;*/ &#10;public class $testClass { &#10;    private Logger log = Logger.getLogger(this.getClass());&#10;    // mock request and response&#10;    private MockHttpServletRequest request = new MockHttpServletRequest();&#10;    private MockHttpServletResponse response = new MockHttpServletResponse();&#10;## 注入目标类&#10;    public ${entry.className} $target;&#10;&#10;## 遍历目标类的共有方法&#10;#foreach($method in $entry.methodList)&#10;&#10;## 实现简单方法参数的组织传入&#10;#set( $paramClasses= ${method.paramClasses})&#10;#set( $paramNames= ${method.paramNames})&#10;#set( $i =0)&#10;    /** &#10;    * Method: ${method.name}&#10;#if($paramClasses.size()&gt;0)&#10;#foreach($paramSize in $paramClasses)&#10;    * @param: $paramClasses.get($i) $paramNames.get($i)&#10;#set($i=$i+1) &#10;#end&#10;#set( $i =0)&#10;#end&#10;    */ &#10;    @Test&#10;    public void test#cap(${method.name})() {&#10;        request.removeAllParameters();&#10;&#9;&#9;String result;&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;//fail&#10;## 组织方法，传入参数&#10;#set( $inParamNames= &quot;${method.paramNames}&quot;)&#10;#set( $inParam= $inParamNames.replace(&quot;[&quot;,&quot;(&quot;).replace(&quot;]&quot;,&quot;)&quot;))&#10;            $target.${method.name}$inParam; &#10;            result = response.getContentAsString();&#10;&#9;&#9;&#9;log.info(&quot;result_fail = &quot;+result);&#10;&#9;&#9;&#9;assertThat(JsonUtil.getJsonValue(result, &quot;errCode&quot;), is(&quot;InvalidArgument&quot;));&#10;            //success &#10;            request.setParameter(&quot;ip&quot;, &quot;&quot;);&#10;            $target.${method.name}$inParam;  &#10;            result = response.getContentAsString();&#10;&#9;&#9;&#9;log.info(&quot;result_fail = &quot;+result);&#10;&#9;&#9;&#9;assertThat(JsonUtil.getJsonValue(result, &quot;errCode&quot;), is(&quot;SUCCESS&quot;));&#10;&#9;&#9;} catch (Exception e) {&#10;&#9;&#9;    log.info(e.getMessage());&#10;&#9;&#9;}&#10;      &#10;    } &#10;    &#10;#end &#10;    &#10;} &#10;#end" />
      </map>
    </option>
  </component>
</project>